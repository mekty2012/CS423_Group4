;; gorilla-repl.fileformat = 1

;; **
;;; # Result
;;; 
;;; This file analyzes result data.
;; **

;; @@
(ns moe.result
  (:require [gorilla-plot.core]
            [clojure.core.matrix
             :refer [matrix diagonal-matrix to-nested-vectors div ecount add]]
            [clojure.core.matrix.operators]
            [clojure.core.matrix.linear]
            [clojure.string]
            [moe.gaussian :refer :all]
            [moe.batchreader :refer :all]
            [moe.preprocess :refer :all]
            [moe.samplers :refer :all]
            [moe.moe :refer :all]
            ))
(use 'nstools.ns)
(require 'mikera.image.core)
(require 'mikera.image.colours)
(require 'byte-streams)
(ns+ template
  (:like anglican-user.worksheet))
;; @@

;; @@
(defn uniform2pixel [r]
  (if (< r -1)
    0
    (if (>= r 1)
      255
      (int (* (inc r) 128)))
    )
  )
;; @@

;; @@
;Made to avoid the hassle of dealing with defm, and simplify calculation
(defn moe-feed-best-single-n [model vect]
  "Performs moe-feed, where gating model leads to cluster with highest probability"
  (let [num_cluster (:num_cluster model)
        pi (:pi model)
        mu_vec (:mu_vec model)
        factor_vec (:factor_vec model)
        kernel_vec (:kernel_vec model)
        prob_cluster (map (fn [index]
                            (eval-gmm pi mu_vec factor_vec index vect)) (range 0 num_cluster))
        index (max-index prob_cluster)]
    (kernel-compute (nth kernel_vec index) vect)
    )
  )


  
(defn moe-feed-prob-single-n [model vect]
  "Performs moe-feed, where gating model leads to cluster probabilistically. It does not need to be sample argument."
  (let [num_cluster (:num_cluster model)
        pi (:pi model)
        mu_vec (:mu_vec model)
        factor_vec (:factor_vec model)
        kernel_vec (:kernel_vec model)
        prob_cluster (normalize 
                        (map (fn [index] (exp
                            (eval-gmm pi mu_vec factor_vec index vect))) (range 0 num_cluster)))
                          
        index (sample* (discrete prob_cluster))]
    (kernel-compute (nth kernel_vec index) vect)
  )
 )


(defn moe-feed-weight-single-n [model vect]
  "Performs moe-feed, where gating model performs weighted sum over all children."
  (let [num_cluster (:num_cluster model)
        pi (:pi model)
        mu_vec (:mu_vec model)
        factor_vec (:factor_vec model)
        shape (shape (first factor_vec))
        kernel_vec (:kernel_vec model)
        prob_cluster (normalize 
                        (map (fn [index] (exp
                            (eval-gmm pi mu_vec factor_vec index vect))) (range 0 num_cluster)))
        kernel-collection (map (fn [x] (kernel-compute x vect)) kernel_vec)]
    (reduce add 0 (map mul kernel-collection prob_cluster))
  )
 )


;For the hierarchical case probably the same but with recusion at certain steps.

(defn moe-feed-best-hierarchical-n [model vect]
  (let [num_cluster (:num_cluster model)
        pi (:pi model)
        mu_vec (:mu_vec model)
        factor_vec (:factor_vec model)
        ischild_vec (:ischild_vec model)
        child_vec (:child_vec model)
        probs (map (fn [index]
                            (eval-gmm pi mu_vec factor_vec index vect)) (range 0 num_cluster))
        index (max-index probs)]
    (if (= (nth ischild_vec index) 1)
      (moe-feed-best-hierarchical-n (nth child_vec index) vect)
      (kernel-compute (nth child_vec index) vect)
      )
    )
  )


(defn moe-feed-prob-hierarchical-n [model vect]
  "Performs moe-feed, where gating model leads to cluster probabilistically. It does not need to be sample argument."
  (let [num_cluster (:num_cluster model)
        pi (:pi model)
        mu_vec (:mu_vec model)
        factor_vec (:factor_vec model)
        ischild_vec (:ischild_vec model)
        child_vec (:child_vec model)
        prob_cluster  (normalize (map (fn [index] (exp
                            (eval-gmm pi mu_vec factor_vec index vect))) (range 0 num_cluster)))
        index (sample* (discrete prob_cluster))]
    (if (= (nth ischild_vec index) 1)
      (moe-feed-prob-hierarchical-n (nth child_vec index) vect)
      (kernel-compute (nth child_vec index) vect)
      )
  )
 )


(defn moe-feed-weight-hierarchical-n [model vect]
  "Performs moe-feed, where gating model performs weighted sum over all children."
  (let [num_cluster (:num_cluster model)
        pi (:pi model)
        mu_vec (:mu_vec model)
        factor_vec (:factor_vec model)
        shape (shape (first factor_vec))
        ischild_vec (:ischild_vec model)
        child_vec (:child_vec model)
        prob_cluster (normalize 
                        (map (fn [index] (exp
                            (eval-gmm pi mu_vec factor_vec index vect))) (range 0 num_cluster)))
        kernel-collection (map 
                            (fn [x] 
                              (if (= (nth ischild_vec x) 1) 
                                (moe-feed-weight-hierarchical-n (nth child_vec x) vect) 
                                (kernel-compute (nth child_vec x) vect))) (range (count ischild_vec)))]
    (reduce add 0 (map mul kernel-collection prob_cluster))
  )
 )
 
;; @@

;; @@
(defn restore [image model box-size hyperparams]
  (let [ret (mikera.image.core/new-image 32 32)
        feeder (case (:feeder hyperparams)
                   "best" (if (:is-single hyperparams) moe-feed-best-single-n moe-feed-best-hierarchical-n)
                   "prob" (if (:is-single hyperparams) moe-feed-prob-single-n moe-feed-prob-hierarchical-n)
                   "weight" (if (:is-single hyperparams) moe-feed-weight-single-n moe-feed-weight-hierarchical-n)
                 	(println "Wrong feed")
                   )]
    (loop [x 0 y 0]
      (if (= y 32)
        ret
        (if (= x 32)
          (recur 0 (inc y))
          (do
            (if (or (< x box-size) (< y box-size) (> x (- 31 box-size)) (> y (- 31 box-size)) (not= 0 (reduce + 0 (mikera.image.colours/components-rgb (mikera.image.core/get-pixel image x y)))))
              (mikera.image.core/set-pixel ret x y (mikera.image.core/get-pixel image x y))
              (let [box (nbox image x y box-size)
                    box-vector (im2vec box (+ 1 (* 2 box-size)))
                    gray-vector (map pixel2gray box-vector)
                    uniform-vector (map rgb2uniform gray-vector)
                    res (feeder model uniform-vector)]
                (mikera.image.core/set-pixel ret x y 
                                             (mikera.image.colours/rgb-from-components 
                                               (uniform2pixel res) 
                                               (uniform2pixel res) 
                                               (uniform2pixel res)))
                )
              )
            (recur (inc x) y)
            )
          )
        )
      )
    )
  )
;; @@

;; @@
(defn log10 [t]
  (/ (log t) (log 10))
  )

(defn peak-signal-to-noise-ratio [original noised]
  (loop [x 0 y 0 mse 0.0]
    (if (= y 32)
      (* 10 (log10 (/ (* 255 255) mse)))
      (if (= x 32)
        (recur 0 (inc y) mse)
        (let [original-pixel (pixel2gray (mikera.image.core/get-pixel original x y))
              noised-pixel (pixel2gray (mikera.image.core/get-pixel noised x y))
              diff (- original-pixel noised-pixel)
              diff2 (* diff diff)]
          (recur (inc x) y (+ mse (/ diff2 1024))))
        )
      )
    )
  )
;; @@

;; @@
(def result-model {:num_cluster 2, :pi [0.5293685069950135 0.47063149300498647], :mu_vec [[0.6117236238221706 0.27157571652641765 0.07040864297384475 0.6255689670864146 0.6090670999552529 -0.471845358894294 -0.2717229907873313 1.5936067252480615 1.4102789650182102 -0.07906951028078568 -1.2451714962254177 0.7613866749976029 -0.4469856689942382 0.1989949229051023 0.3740272298179407 0.8167519707803207 -0.1265281680550635 0.48705691930453165 -1.6899802374383674 -0.0531115538300887 -0.31538342810818676 -0.5361409704565671 -0.3411600522773548 1.1196213560871962 0.22642475429161074] [-0.49826699361078997 1.2047747272246392 -0.09667156336482552 -0.3314841029306096 0.043772516638906855 -0.014222569923040385 1.8067189962864294 0.16478598060909982 0.4403629269151273 -0.3813589996979886 1.4069068498186197 2.05787915684259 0.6562270724998613 0.9563030049514084 0.23673700826677618 -0.522683443489961 -0.8561047542646049 0.25168558138791014 1.1563294457615279 0.38502685940050224 -0.0868511324978416 -0.017206476982535857 -0.14822796251826653 0.38455069221008875 0.8585566104561949]], :factor_vec [[[4.069527040058154 -6.516158803872698 -3.0070850652822694 1.3513805091612623 1.2820244377324057 2.0838031868069935 -0.4669822834814371 3.888506179576965 -14.71095689728918 -7.135712328022107 3.993084019741073 2.1617096928017245 6.744253772090332 2.35099337599376 2.215666579076885 -1.1604180924528467 7.14068029215652 -1.2920745239043316 7.433921010685382 0.45291003595497936 -2.1951761095887163 -12.591967415466192 2.6315846107683534 -7.758674585647798 5.935284405895634] [-2.0178760134295377 -5.260301226082901 -1.0864159935884676 1.8353331910681852 5.414730202845825 -3.3932222950683024 -0.31177808760701 7.97368434422733 6.508798137232487 12.99319904159552 -1.1611147381386118 5.590333496619358 -2.5095788039086098 -6.112691106344558 -1.6343505636892046 -2.8187914760843973 -0.8017261719360458 4.859147415621624 -6.3806839886193565 -1.3886122794096172 1.552706057423628 -8.409704178424168 -0.06944000515673956 7.307752036305106 -4.553733231519202] [-0.5324839324290924 -13.240623287832289 6.561582368661605 -2.969718132758522 -11.962684251719429 6.768893675983983 -3.4854794389442083 5.9623982717718125 9.069145269558367 1.468982314334384 -7.341503981304539 5.567293086148814 9.560648435205913 -4.944542974780254 -1.7349306287401027 -7.111924261226843 -3.996460008411697 -2.651202783179543 2.2951051622960477 -5.7098683467648845 -0.9446705474572354 3.132070855562033 0.23377202913042686 -2.3842277181809317 1.667539600895439] [-1.6071451458309074 0.3359806347085198 -5.42664556850528 -11.05033827220678 -0.4585485343529184 -1.2204576875321111 -2.33267761951374 -4.759808399082019 3.336718804892298 0.31910143717645556 -0.9084347324806887 -5.769375724778423 5.8644495663144225 1.7560760806108915 -0.3255463661735398 -10.400181868328215 -3.7950055348673635 6.22654703365049 3.042875512362032 -7.038993319616174 0.23049765776920214 -10.6925376976176 1.416155648627245 2.8989472768342988 0.645065804907855] [13.954899422373641 -4.186334433298641 7.020541935975521 -5.57440241081305 -2.9931546703661516 7.066792792463961 6.668323481935763 1.4402276908971403 -1.454779666781375 -5.695309455843843 1.811004856428553 5.138571044724515 -0.24269986964281728 1.0123583933840072 2.0268967837648324 -5.094092378423226 4.940444596949249 -1.2248151548831387 -10.01077524462499 11.165562349667413 4.005861555292844 3.8638336066510623 4.077077513803282 -3.827470481536082 6.047868318922254] [-1.8668881600152647 4.067520613502214 -0.1394701230036284 11.094878186994634 -7.904410790307375 -5.899087852378928 -3.6817457288797146 2.2373001920655744 -4.00008187763305 -1.331658846272297 -13.928586563505691 10.246050452736949 -4.945099808369716 -0.21947093649284963 3.780832639714616 -2.14494026951371 -6.799147010667746 -5.9285744981285475 -5.5882118644566425 -0.2784449378777475 -1.115992825372302 -0.2626835938804529 -2.778222943745571 3.8380770148893393 1.1718446117866272] [-4.190336239337058 7.9559655701514345 20.50513576525054 -7.038079104010704 -8.451598492316867 0.5529652296974562 -2.7654828197728945 3.8039577009998933 5.895659261250924 7.613224923302782 0.7786129536284756 -0.6289916409890334 -4.018444789810556 -3.6963768755733146 4.27007088657966 0.583170349386221 -2.68547597590496 1.5519406317088067 -5.267190755623567 0.3591999326632842 -2.5227231015363385 -7.247016635161416 -4.751261448087136 -0.5700383473835613 7.933843739056777] [2.951587094072566 -3.835178256698568 8.633872036643506 -5.170345962214816 0.3095733932056388 -6.365160521553611 -2.927785572853873 -10.754263685545459 5.871021650354818 -4.439822719991997 4.427556593314954 -9.02293705143633 -5.744380745153582 1.2752451188051555 -4.84204947919466 -5.588294905734015 -1.2726288366025658 -5.164499865713595 -6.062863190133797 -0.9704238920701678 -9.805708871912142 0.19567436696504426 -9.034806514055482 0.053536407194531316 2.786624010054003] [-3.5475275631776793 4.864262462715312 1.2097380244924767 -7.670296247294945 1.6649011673269085 1.1245515303814826 0.8486956313563965 10.282597166778066 0.1348867469898793 10.780234975027579 -1.3067169774160379 8.944231597191925 8.584110241015107 -0.03452059159387649 -0.35072355358316476 0.5496122342299454 -9.168447851048557 -4.331664638378434 -1.1339442174719454 -9.024459651273192 9.1501010637657 -0.4611455973485069 4.8962913192699276 2.879198298042984 -3.590277889329468] [1.4219304230197138 0.8907822064875992 -5.163651839286184 8.096387883007614 12.919619519136017 -1.6555982036438168 13.837373151603899 -3.0220576918847866 0.7909635120377628 3.680995680174231 4.57433343506421 7.397388606884182 -12.898964217093903 -8.986828449394784 2.498899203314174 2.3983225065570286 -0.728904460673138 8.811764985652363 9.051570418049115 -0.9388313452211678 7.692366881052669 -1.5146939947270899 -0.39012382053535066 -3.497241854309126 -7.443650628905235] [-5.836528083585191 -1.8035226857305247 -0.49113834164678205 -3.3566531015648406 11.867955594354251 -2.1829066124415344 3.7833729703159964 -0.44742676460914743 6.166698536826201 6.145374582756486 -2.5553305785784155 -4.612344780304684 7.962422752839334 -1.2534621907449874 -2.4108265723075193 -11.928246863731964 3.6660041839126785 1.9257899956988633 6.494228586169302 1.2275345510020907 4.201860022535547 3.6975039205314553 0.21635245749007045 -1.2203283410632195 6.747354138107176] [2.627672616315449 -0.8965360008604442 -2.3165511715582263 -4.756754892604598 7.948240143579949 1.9841866008095874 -7.305717478301318 -2.8496336305182366 10.02620364028337 1.9115618416820077 -3.412256635844132 3.0447971330865364 2.138966027397637 5.944557416472285 9.069571146302705 -1.8851162736528895 -5.647011664449007 -5.237390379219952 -0.8040064627491372 10.62326758602413 0.15591332900921834 0.49331820411389327 6.815968853930464 -2.3540580505642827 0.15672629639175642] [-0.23025135311865222 3.781147176652091 -0.4279865893341738 5.583143050585061 -7.323720745327471 -2.2455557133962873 -3.1324678411635802 0.5460756091500548 -1.8703120194147964 3.4413749925403683 12.590611836187596 10.366218924793689 0.009357676153997102 -5.138235646613349 2.054632630253464 -0.628226937243505 12.352689405766125 -2.125273761939763 -5.173456756949072 5.607470919569353 8.432326427113985 6.420157752648108 -2.0183273929407775 -10.356341592179 9.491190325782549] [3.554903577955091 4.360122823491985 -6.7215525500915705 -3.1035285492028923 -7.789861485401567 3.851840662598302 -3.55012738453428 4.4749791950038995 -10.328560236897514 0.7986859651783753 -8.756436578611208 1.5923386342837427 1.9797904796398857 -2.318088071079577 -5.37103239158288 -1.4199892014780597 0.40676216554609085 4.017425767140237 2.5471321357327024 -4.666724028306002 -3.903832205542276 -2.0572475773574843 7.279772563228075 -0.3365873397597794 -2.627333834775834] [0.36123604955704214 -12.799702824100025 -6.368913469391492 -3.1015885766483593 1.239821030405739 11.004870181774358 1.9285819838184843 -0.01695261043414173 -0.23593886981270842 -7.679418607166208 0.4945875114584719 -0.1275689093479361 8.102381178567393 12.972304618084488 -1.6088448606832768 4.363464473908705 -0.9307014923111026 -2.6420296379712758 -4.215589848087347 -4.658346615998153 7.125925959567875 6.7840521290122 -10.699206634712219 0.2714193347169517 -6.838377681198195] [-6.117098936115325 -6.354106104085495 6.211583872805007 1.5681684779993272 -13.520690355936331 -1.9281414455332395 -8.83162544388545 4.348063357771056 17.60379731140174 4.792462406231059 0.7134876058616699 6.999211492657653 -1.2953100002180222 8.260262555707476 -1.555170247223378 9.421022464523743 3.3304349496027372 -4.991916380068918 -0.5779509312879697 3.7726298580837563 0.6903318242449602 2.8306886446042885 4.335790261114649 -0.6342172540759858 -1.4566528460351817] [1.5893887587928606 3.300499327029351 1.9029535151164638 3.8185560662059292 3.2036817675426916 1.4911586090553204 8.627876656404025 7.080984701073153 -3.014380656648602 11.071841080475968 3.7686603995906762 -1.3838317926851345 -4.047279133818001 0.03249884230704664 -3.715319742346835 1.7046971705303977 -0.31281298286784165 3.580665062799202 -4.157271733364517 -5.469326445928825 -4.651637426098673 -4.986982044738615 -4.1856758541018015 -11.97485088821388 6.276783623511232] [2.629447322373924 3.01853179120903 -0.22771693716149652 7.586915090319972 0.6234700263757232 0.876064691576605 3.3807541372405305 7.659589720602816 -7.285423246123758 -5.470497665138518 5.909608129131886 1.7531703778776282 -0.326933009349727 -10.39737113505845 7.991897441787767 17.70061669991097 -4.908988371111535 1.6952339118877093 1.8003923583635457 1.7445242385468873 -1.4889615119279989 -3.208932745312174 -3.5019760753122546 -1.7395255588649454 0.7613163358423751] [2.910479767561368 0.19303626520794165 3.1122202670503145 -4.720892429633214 7.667599219209857 -1.5058317612724563 -4.957345033751658 -7.401503712684321 -1.8421171166823205 3.18313767852933 1.106925084917604 0.09947092773408073 3.8525088433220174 -1.505749698793539 2.681714007754763 9.905636208959907 11.769569712851572 -0.7706558684801683 0.5591737084336198 -0.45838948750811337 -4.835055982533293 -3.2695337928119215 -2.0259826678412476 -1.295383879278486 0.15022313923181785] [-8.75142956919824 -2.359971407241313 4.841983544642537 3.769965400950814 -0.517373903815952 12.759037693522957 -0.29165800630728467 -2.537624501852955 6.643763373096593 -0.8942905194500839 -0.8239350989939724 -3.9570901054358565 -4.885461514204458 3.176912899241056 2.465816623328684 -3.4799953250459033 5.831584477733297 -2.5921725933984145 0.536070923630089 4.884055039553715 -2.8939827530754205 2.5257181319356703 7.333013410408875 -11.973861734275522 -4.798868127087861] [-5.86069593458072 -7.850460080280562 -3.9645152466825584 1.4862890905327428 -2.057079851416963 -5.563080204834608 0.011146140435430829 -0.6787264686911453 -7.67153204733885 -2.769945534853097 -1.605617372361655 12.2092442088037 -3.148252445323729 -0.46294620025137523 -7.027598214647911 -4.757671296647042 -3.343374292975371 -2.907499191743375 8.39776758766461 18.632215423900167 1.8943079361519888 -7.554112038754461 -3.5242449615912803 4.966619582245238 9.673963230278856] [-9.838150178818326 -10.358219506995145 -5.266202286641694 3.47234626956145 -0.8461887150918581 0.6444724783476814 7.991966060710135 -1.2856058855069328 -6.439517240774775 -1.442112849811385 -10.993832984157407 13.320860550990304 -2.435048571256031 4.508452674342444 1.1935950879611261 9.30523998765697 -2.347138277676296 -8.530325046258419 -0.07360470350852674 6.899542727790993 5.601581116186163 7.9384883004530975 -7.356775721026967 -2.8378684098061258 3.560245295841707] [-6.714466936014695 -3.911750962758485 -6.448305013376206 -5.41931984543787 -5.76539844745608 -11.579142467265692 2.740468289095829 -5.190608204056148 -1.013132698205683 -10.217450065699461 0.9553167608906679 -3.030091036905318 7.703307756763223 -1.4760158780403152 -1.9035449529253776 -1.4938008559703244 3.2893185101824622 2.858938704481171 -2.2466397272411136 -2.6115801877647624 2.825515783923664 0.42175401962593234 3.7359827111392048 0.06003339741342881 -3.6600521432543953] [-5.791989001040912 3.4127321176724084 3.7760398696290416 13.664360274071125 6.599007444095857 10.62843875133869 -3.970788137945429 1.4119936842532443 -5.649942597336935 -4.41262747158715 2.819653987773783 -0.21547745112459218 -10.044536032343833 12.234180168605265 5.0991759863479755 5.15629139906586 -3.258504654509607 5.77051068934073 0.7066618400758473 -4.284664445545502 3.035163749669633 1.1126953195046856 3.1255719496738914 5.329010804772346 -1.1001157887074486] [1.622273093663735 2.8598495089516347 9.340170974558808 -12.09728747057577 1.4660509399422799 10.758317769309624 2.0290530690030493 -3.8995833796531336 -1.1633477943481008 -1.0118769706312516 7.574512947943197 0.032472497432433245 0.9432881685637468 -2.634480294277147 -4.24509942681476 -2.6336845838650964 -1.7912466797903337 1.4708480748057873 2.5737915978938837 -0.28779753121097873 0.7717649135186385 -3.3313976555245586 -3.903988147692375 -3.623873891548373 -2.2502049681092497]] [[-6.933816380404146 -8.170479031551624 -2.7785843504602847 -9.405999870465426 3.4697684612548088 4.166522636134233 7.084915372027028 -10.864040269777234 -9.961801090768105 1.733784157928372 -5.622955471937336 -3.3894745370549915 3.8694206539506646 -9.072237476616994 2.2739569366426706 1.2000447174708875 -3.5160802331790793 1.307486505963203 4.823046061298447 -0.02120805617654864 5.695938400293648 1.3340188153133463 9.730897526755056 7.9726408067137875 -4.966504963950102] [-3.1173093810616432 7.3313017581775 -0.5405581392117921 0.7844913240768944 6.136733633880296 11.125222747454334 -0.6943347796298783 -1.3560969438426185 -5.847313013239657 -2.9189098879806465 -1.6009079540275268 -1.0400272621925932 1.045745416411179 -7.171993746750877 5.539716302067247 -4.927192453379914 9.052484830375919 -1.4358448866606166 4.468911573084774 12.572138150466985 10.118512531575563 4.007388874331346 13.524205773022603 -6.658722040343842 -10.171624447538607] [-1.6461008997317927 -10.13212426156945 8.632929013970763 -1.9400390918208836 -3.902896309745884 4.2211243559100655 1.492337072436319 -2.6748980660163744 -1.7656574470839823 4.728265383081812 -2.9558914553143207 -2.6397932904583583 -5.402489313278396 8.88961925110677 -6.9197790244628905 7.846180178631804 -4.117519415666376 -5.297530090564503 0.337794293456241 -9.621932237637623 2.2929247281602927 -8.426501713446871 -9.709320283988474 -5.8166961732522 -3.8051982602881527] [-1.0678548403563224 5.19803401369903 3.998047001480504 3.9984536772902075 22.595859204371983 -4.994981025699707 0.7655934914002194 3.9666603569759578 2.780562430907482 -5.053731121723837 2.136580282349725 8.450799873796873 -1.029178826439693 2.712997827463336 2.0492031694380084 -0.8623263932863614 1.4178041034736397 -0.5675532953522606 -10.890564089053752 -5.29345824592056 2.178924312374395 -2.327508705490615 -1.6180663698271442 -0.22446242471001024 -6.733243215113712] [1.1525514593566883 -8.568936945923166 3.1362917902453225 -10.634164181379402 4.664797353745283 0.34373813091821603 2.6140781565434246 -8.309198572312644 6.273715627191122 5.718389050992825 5.17643947078931 -1.583191198682226 6.089665089331477 2.5988078312828433 -9.008850400451909 0.8941697934329313 4.6609156412260155 -5.066694404703175 8.509446159884892 -2.968121976398008 -6.254395635165241 2.365364378377978 9.578857500611852 5.569502488634853 0.03022429992017478] [-5.061560467398959 -1.4436700238728186 2.258299410702875 -1.4895292743533184 6.119997014758864 -2.0609452606337477 -8.803513109724534 -5.854917916728661 8.66252206718616 1.1705957741350053 9.262711622835436 -7.681505742573425 7.865998196152442 -7.203256612435161 -3.191870858279758 -2.895448629009753 -15.937067791870062 -8.427854211212475 3.771597796334016 7.677858388315701 -4.495696228013258 -3.7424864234533293 -2.6659310936354017 5.573969179145654 -5.638890705816511] [10.27991662281752 -8.463673294953725 -4.127415036313593 5.8802296722033525 3.2785017024189416 0.8203472261518174 4.8316003620193015 2.2017056248262907 4.824745123604949 -0.7799638175371905 7.876849708253862 3.360851615979332 -0.4621142851571599 -0.34155814934683804 -10.321547561121088 -10.523597693543456 1.7876228564481036 4.147188910726485 -0.9903962086804401 12.102010346609752 -5.924267991205079 4.099498691636791 -4.333066283961001 1.7593189923238965 -12.942452341959298] [2.4183895780191698 6.692888411470852 -1.1066578066733743 -3.1363163135565597 -1.4211208637301656 -0.4788400828341829 -6.735429718605226 3.0967860810167225 2.5819322541984278 7.603789661953069 8.03018585047035 2.341543947076997 -0.4539655208288069 0.6628632645293947 -10.141315401673253 -1.5996009958901751 -1.5675238537088967 8.056781164313332 -12.029929938140285 -9.956946833290479 1.606368987162426 5.338183064434664 -1.285495903994231 10.100088523187587 -0.9400112562750951] [2.6457836531826158 8.900830638071438 -1.5036338142073749 1.9603064281966078 1.3509567274415961 -5.627163699761293 -4.762933514322114 -11.756278658044934 -3.7153447190992757 -4.204447011197658 -2.3040762158769237 -10.65596617445849 5.52906280353611 -1.7853112762074512 6.7410171097178715 -2.284419736059304 5.2236232946603405 1.9936953588014086 -5.613058256381684 -8.154378527435101 -2.373603769030591 -6.282422828185241 4.1401429965487715 -9.479476183057248 -9.32679761151676] [1.8361847694243212 0.7821470497500226 2.405439349965384 8.336992588615423 3.7006260607883283 -3.559033434762696 -1.8086854942388524 10.643476983032981 -5.37726578130997 3.450940479433734 4.072073707428515 4.965462614054962 2.311832556727423 1.0257373672349699 9.88690779350724 -7.528251931890945 9.61013536530022 1.638822656928296 1.2562752749591013 2.0900738112395842 6.99854381309881 -9.603480596302122 9.836559584370034 3.9186751638418644 -2.3347166059584827] [1.4984428712457543 -5.401453444483808 -4.555772739524894 1.290012672994293 6.244112784535757 -4.280023324074714 -2.6040431909046013 -0.6556085246515306 0.009619189704339115 1.3658280157428317 -6.200622704151623 4.080477231204467 -5.429821199104124 -4.778854738353486 8.176487868047749 6.437666132291574 0.3598481036705653 11.628802888288554 -12.849924312799745 8.007427131097234 -5.966835769826757 0.2161638322207862 -6.130803583752074 10.34939133029492 -0.5093817304227606] [-7.639290424028217 0.6175511266294579 2.125766055759139 -6.142305116847724 -1.6096365660656746 2.7312565605312993 -8.845577360809415 1.2103402028685117 6.825724911138126 4.249081886638365 -1.3068785746609786 0.05517425577689991 7.88860822666659 0.7999880015055222 10.068420606753069 1.303146184807448 -3.4836360935586272 -9.841950472735782 5.261410171104432 -4.580132263736824 9.627598889720055 -3.3311889705991975 -2.4620456826312447 3.278378254336367 -7.605496010145319] [0.6946829300915488 3.971069597589951 5.273837569357523 -4.2683709604022555 1.2038995494576472 -8.774798399805388 -6.496770607978039 10.416461790590775 -0.007176871359898529 -4.308779164421699 3.7957990797052297 5.916385309076271 -6.305136392437615 -5.001833935472419 1.5977025249536176 -2.3031034606563345 -1.640393825634458 12.01056850089531 -0.6539595216988919 3.075168416913854 -0.9250719020030564 -5.54224199384872 -2.223380959985819 9.027527132595615 13.834442613102413] [-8.900965382574078 5.265819673402319 -12.817028041889738 -1.0667337704928113 -0.7761491393196038 2.0438050208254332 9.378102665876181 3.778419459840617 -3.0681022638641124 -4.0768359939573235 4.628744268762693 11.562874569450731 -2.67903303791939 -0.8608549120265652 -5.515048921777782 -3.700557855146094 -6.626642208770499 -0.9920006350929347 -6.850393307065676 3.3085440959300025 -2.2492052299230414 7.788103417374764 1.9867912622017558 -5.058432043064713 -5.31041608222487] [-2.494957883164089 -8.836935121306764 -3.2075933767211415 5.224181532256407 -0.6286256606822554 -9.683182034986228 -3.3696722493568076 -1.5754784053359967 4.299667261457481 4.216447961846891 -10.083220971753892 1.493930651853611 4.426237077328118 -5.206570969005502 0.010957620007207819 5.71803259848849 3.8769408875836278 -0.8660756658098379 6.954297641089008 -2.0785118232705098 2.566526068745718 5.332094179396306 6.795931517687548 0.663145796131271 7.333404718392158] [-9.42511490377738 -2.423602029347735 -4.314059978107473 -3.090308801162357 5.133833366878134 -4.1622961242604495 4.498633905840141 5.920001449013625 -1.939005431010582 -7.567004391851684 7.886933893014829 6.189748648587214 -2.2897211768153647 -7.263664093479886 -6.638868297432999 -8.105351651246266 2.89448727902313 -2.257816831582211 -11.326762173590758 4.593341443506291 3.8574643604912686 4.051038028575072 1.2679536393627038 -9.894445280095082 7.001812412570788] [1.6703884313288206 -1.368148827813437 2.1000082272760934 -6.568280299352283 -4.94372545219808 4.240730653076751 -4.500700396515419 1.5331826606710766 -6.53879882929749 9.339687550708867 -2.8195123517995824 4.1448550757906135 -9.116608826558897 1.9956605800963527 -10.550650297516517 -1.090012893049717 -9.034330568115863 -1.296411309302499 1.5212684174947326 -2.5904199471005533 3.2953668180697013 2.9029599039638967 -7.281952666565545 4.917106945498396 -4.70337678261132] [0.2356125718025335 9.32649003531136 5.8627994360777 0.3902908817766635 2.847924970887286 1.4006393806261648 6.048286765927152 3.1965605537387667 3.8530955944066805 -2.6656274658404864 3.565742976426482 13.96691483399799 -10.017450300899505 3.805805761504232 -11.727544266927168 0.5163744898826031 -8.37464037173622 -0.11511119597825295 -2.220432959764252 3.2648964095205564 -4.488428821685323 -0.2984582378049119 -6.2402463980636185 3.5067265636083946 2.4303692583414884] [1.8980660685428932 -6.720576515657822 -3.100669807314388 -9.50052612280838 -1.0039216050060042 -1.3136283063460517 -7.183345053607662 -4.010408271387037 13.299368749554358 1.5434033029831469 -6.068713687081496 6.588258294373326 3.8030397350201532 -2.6470749185716356 1.7186036646746605 3.4873660628290253 -5.55060073177989 2.2896450885938697 -13.390923955815042 5.156704026788939 4.4190586890058325 2.738873977117501 -6.547761249816683 8.351785400167728 -1.863871684975382] [-0.3367632959729441 5.090565899527285 -1.1249013451861594 -4.039112263162081 12.78647410768544 -2.1036122985219796 -14.213755862952517 1.2384996327594422 -4.171392538046699 -8.08888637886329 -3.916357225353824 3.369722427606008 -6.748678156382383 -4.448486504709034 1.5120433014839052 -12.138634626676033 3.1940219981763533 -2.0288356592688976 -0.8729139431033242 -7.023386177277215 -2.5481112054080497 1.2907574989922077 9.840195783192442 -5.917502717155688 3.3479782645082765] [-1.7662174861278417 -2.4254188645921637 10.186516546196591 11.419615663581585 5.080035838655955 -1.9156061292288398 -5.137488884573303 -0.43007343284628863 5.047940938060639 -5.85141202126148 -1.3501356318655564 -0.3035615203130563 14.093142246885657 0.9015269990060515 0.13172070062999464 -0.28755431879974647 -6.984331809282932 -3.3580828183430778 -2.560734097624817 -0.00371726275658113 10.8131834439884 -1.647936641872476 -8.879423980831508 -0.803365791226043 8.912383157063122] [6.257396315968816 -4.776977653061207 2.8790966640453415 -2.201292292787648 -0.7162908455853398 4.479866984220978 10.922148119266032 5.557730258594283 1.6309917013175446 6.359149602959915 -2.2707201269648785 -0.9102240754146851 8.449715491366234 8.762543513158711 1.0412603816595196 -5.185111547896259 -1.8455201392714906 -1.4656175505803073 -4.249950149490808 6.0869609678934005 -6.750979199979617 -8.921654372938926 0.7281429440841396 3.0371134593473377 8.490363462884305] [5.7575061122189855 1.7495340498397185 4.350541887234164 2.9441921436350844 8.059619316594372 -8.994039751535711 -3.158494962524055 1.7861058660571623 -2.3808789783633393 -0.4510799778503938 1.7824132206123777 -0.1257500928378145 -8.807585259229072 0.20807406554687405 9.07072814470141 -3.094872561032798 -8.03636752705122 -2.883084493492013 0.7529698278498613 -6.3153496560083635 -2.9821467823071433 3.460409408730115 2.1378044412688633 -4.877804273591668 2.42171660713149] [-6.785880069652532 2.6068004372756555 0.12349514620957217 -4.652714693718922 -8.358524413102806 3.619732184554413 6.996638245905925 3.520857816710671 3.0406055122749285 2.611011713249268 -0.3969045026310767 3.145465427937511 -5.179565294015923 -0.16601742872759226 -5.461495854476773 -6.029109590544259 5.64377484036631 8.434973127776884 -1.5938001313411336 3.0478266225585533 -6.30443597976942 -0.23889788251203822 1.4558189170888103 0.8406308576850203 -6.337770044387117] [2.879117371864995 -3.200713022796944 -5.223784137910199 -4.180157543870918 -11.434489784898476 -2.311886100784778 -3.3109685072600405 -3.0154712699198485 3.9405329236645574 0.7485693093981581 5.530284311040066 0.1424765399756322 4.382372419305567 2.0364796372494847 -2.1014644804997316 1.107766807794546 -5.186366793488726 7.997569665153872 7.370586051464891 -2.969307138813238 7.9173587725317205 4.790387670809481 4.107997411580122 -8.623605314878281 0.8856477834486887]]], :kernel_vec [[9.373924434415281 0.0037651564986795893 -0.014131905116207502 -0.06513029991989988 -0.04670585779690356 -0.07936739725468112 -0.038319623408891494 0.030886756671019894 -0.08714436730722838 -0.013819249790005067 0.006513098981395682 0.06770446475613903 0.049415327734923326 -0.038146558736037256 0.09518151591033111 -0.05762171807474952 0.025321964694063268 0.023625583294732175 -0.034918544288487084 0.03409029446724971 -0.08953845107147004 -0.07885992049935009 0.006309906977950058 0.04202255421559045 -0.006390186780857857 -0.07820297767478146] [13.191435567715452 0.06220228187025148 -0.05882090133801556 0.08236940448888294 0.03547022710023853 0.06726766332059514 -0.029722636008431558 -0.03919994347601283 0.018827338513192793 0.03227807966797228 0.06995953818789649 -0.03209160389975715 0.023341668968401022 -0.02629445808625172 -0.053888080397211165 0.014924951018573149 0.013876469865034644 -0.030160961802670833 -0.09480685892064128 -0.09096546698564495 -0.01586118847234745 -0.04345764431470664 0.06917525941755678 0.007877809154693508 -0.04526233017412948 0.045663928291518385]]})
;; @@

;; @@
(defn inverse-factor-vec [model]
  (let [num_cluster (:num_cluster model)
        pi (:pi model)
        mu_vec (:mu_vec model)
        factor_vec (:factor_vec model)
        ischild_vec (:ischild_vec model)
        child_vec (:child_vec model)
        kernel_vec (:kernel_vec model)
        inversed-factor-vec (map clojure.core.matrix/inverse factor_vec)
        inversed-child-vec (map (fn [index] 
                                    (if (= 1 (nth ischild_vec index)) 
                                      (inverse-factor-vec (nth child_vec index))
                                      (nth child_vec index))) (range 0 num_cluster))]
    {:num_cluster num_cluster, :pi pi, :mu_vec mu_vec, :factor_vec inversed-factor-vec, :ischild_vec ischild_vec, :child_vec inversed-child-vec, :kernel_vec  kernel_vec}
    	)
  )
;; @@

;; @@
(def inverse-model (inverse-factor-vec result-model))
;; @@

;; @@
(defn for-images-deer-1 [file-name iter-num do-fun]
  "Read file-name, to 32*32 images, and for each image, apply do-fun. It will perform do-fun for n images."
  (let [f (java.io.File. file-name)
		  st (byte-streams/to-byte-array f)]
    (loop [chunk (partition 3073 st) n iter-num]
      (let [ch (first chunk)
            deerclassifier (first ch)
            firstarray (next ch)
            image (mikera.image.core/new-image 32 32)
            pixels (mikera.image.core/get-pixels image)]
        (if (not= deerclassifier 4) (recur (next chunk) n)
          (do 
            (loop [i 0 j 0]
              (if (= j 32)
                (do-fun n image)
                (if (= i 32)
                  (recur 0 (+ j 1))
                  (do
                    (mikera.image.core/set-pixel image i j (mikera.image.colours/rgb-from-components
                                                             (sb2ub (nth firstarray (+ i (* 32 j))))
                                                             (sb2ub (nth firstarray (+ 1024 (+ i (* 32 j)))))
                                                             (sb2ub (nth firstarray (+ 2048 (+ i (* 32 j)))))))
                    (recur (+ i 1) j)
                    )
                  )
                )
              ) 
              (when (> n 1) (recur (next chunk) (- n 1)))
              )
            )
          )
        )
      )
    )
;; @@

;; @@
(defn get-restore-result [n image]
  (let [gray (grayscaled image)
        drop (dropoutted-normal gray 0.2)
        restore (restore drop inverse-model 2 {:feeder "weight", :is-single true})
        original (clojure.string/replace "data/deer/asw-smc/10/orginal_auto-single-best_num.png" "num" (str n))
        grayed (clojure.string/replace "data/deer/asw-smc/10/gray_auto-single-best_num.png" "num" (str n))
        dropped (clojure.string/replace "data/deer/asw-smc/10/drop_auto-single-best_num.png" "num" (str n))
        restored (clojure.string/replace "data/deer/asw-smc/10/restore_auto-single-best_num.png" "num" (str n))]
    
  (mikera.image.core/save image original)
  (mikera.image.core/save gray grayed)
  (mikera.image.core/save drop dropped)
  (mikera.image.core/save restore restored)
  (println (peak-signal-to-noise-ratio gray drop))
  (println (peak-signal-to-noise-ratio gray restore)
    )
  ))
;; @@

;; @@
(for-images-deer-1 "data/cifar-10-batches-bin/data_batch_2.bin" 20 get-restore-result)
;; @@

;; @@
(def signals [14.143840494003864
12.144413656866043
16.785633464379227
11.573502562456149
16.25000662902516
11.39480305318074
15.630989917320491
10.781305936004106
12.525198283483743
14.14375751275357
11.802486440250187
13.176723579450321
11.50446093511611
13.353163398851892
14.650098707126485
11.449486239205264
14.761149144007026
11.999832887142167
13.897002310522414
11.349694840698879
15.409435612819602
11.694453529083882
14.843814937798099
11.113876885183824
14.753594941196953
11.563542102669071
13.318198743612111
12.515534388471291
13.789712107561538
11.712013989434222
14.007968788692477
10.951730026577401
14.630294874736565
11.946426613008615
14.024329345288757
10.913798526450321
12.308433894767475
13.458034374324509
10.675169669817938
12.605227615648912
])
;; @@

;; @@
(loop [n 0 old 0 new 0]
  (if (= n 10)
    [(/ old n) (/ new n)]
    (recur (+ 1 n) (+ old (nth signals (* 2 n))) (+ new (nth signals (+ (* 2 n ) 1))))))
;; @@

;; @@

;; @@
